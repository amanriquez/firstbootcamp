////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step) {
  let myArray = [];
  
    if (num1 === num2){
        return myArray;
    }
  
    if (step === undefined){
      step = 1;
    }
  
    if (num1 < num2 && step < 0){
      return myArray;
    }
    
    if (num1 < num2){
        for (var i = num1; i <= num2; i =  i + step){
            myArray.push(i);
      }  
      
      // if (num1 > num2) {
      //   for (var i = num1; i >= num2; i = i - Math.abs(step)){ // check logic
      //       myArray.push(i);
      // }
      // //return myArray;
    }  
    return myArray;
 
}


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {

if (array.length === 0) {
  return 0;
}

return array.reduce( (a, b) => a + b);


}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  
  var newArr = [];
  
  for (var i = arr.length -1; i >= 0; i--){
    newArr.push(arr[i]);
  }
console.log(newArr);
return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// algorithm where you swap first place with last place, secondplace with second to last place, and so on. 
// you don't need to touch the middle element if it's an array with an odd number of elements

function reverseArrayInPlace(arr) {
   for (let i = 0; i < Math.floor(arr.length/2); i++){
     let x =arr[i];
     arr[i] = arr[arr.length-1-i];
     arr[arr.length-1-i] = x;
   }
   return arr;
   
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length -1; i >= 0; i--){
    list = {value: array[i], rest: list};
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {

let array = [];
var node = list;
while (node) {
  array.push(node.value);
  node = node.rest;
}
return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value: value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
 if (!list){
       return undefined;

 } else if (n == 0){
        return list.value;

  } else {
        return nth(list.rest, n - 1);
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(obj1, obj2) {
  

  
  if (obj1 === obj2) {
    return true;
  }
  
   if (typeof obj1 != 'object' || typeof obj2 != 'object' || obj1 == null || obj2 == null ){
    return false;
  }
  
  let props1 = Object.keys(obj1);
  let props2 = Object.keys(obj2);
  
  if (props1.length != props2.length){
    return false;
  }
  
  for (let key of props1) {
    if (!props2.includes(key) || !deepEqual(obj1[key], obj2[key])){
      return false;
    } 
  }

  return true;
  

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
  }